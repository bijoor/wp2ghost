const fs = require('fs');
const util = require('util');
var parser = require('xml2js');
var uuid = require('uuid');

/***  Configuration Variables: Edit these to appropriate file names ***/
var config = {
    'ghostJSON':'data/bijoor.in.json', // file generated by Wordpress Ghost Plugin or by Ghost export in labs
    'wpXML': 'data/bijoor.me.xml', // file generated by Wordpress export
    'wpcatXML': 'data/bijoor.me.categories.xml', // file generated by Wordpress Categories Export plugin
    'outputJSON': 'data/update_ghost_data.json' // file to store the corrected Ghost JSON file that can be imported into Ghost using Import facility in labs
};

getKeys(config).map(function(fileName) {
    if (!fileName.match(/output/i) && !fs.existsSync(config[fileName])) {
        console.log("File "+config[fileName]+" not found");
        process.exit();
    }
});

// Read the Ghost JSON file
var json = '';
if (!fs.existsSync(config.ghostJSON)) {
    console.log("ghostJSON file "+config.ghostJSON+" not found");
    process.exit();
} else {
    json = JSON.parse(fs.readFileSync(config.ghostJSON));
}

// Read the Wordpress XML files
if (!fs.existsSync(config.wpXML) || !fs.existsSync(config.wpcatXML)) {
    console.log("wpXML file "+config.wpXML+" or wpcatXML file "+config.wpcatXML+" not found");
    process.exit();
}
var xml = fs.readFileSync(config.wpXML);
var categoryXml = fs.readFileSync(config.wpcatXML);

// Initialize some global variables
var gTagLookup={}; // lookup gtags by slug
var gTagLookupId={}; // lookup gtags by id
var gPostTags={}; // map of gpost slug to gtag object
var gPostsLookup={}; // map of all gposts with key as slug
var gPostsLookupId={}; // map of all gposts with key as id

// Create a lookup for all Ghost tags
createGhostTagMaps(json.db[0].data.tags,json.db[0].data.posts_tags);

// Parse the Wordpress categoryXml and process it
parser.parseString(categoryXml,function(err,result) {
    if (err) {
        throw err;
    }
    //Get WP Posts
    var wpcategories = getWPCategories(result);
    //Update ghost tags with all missing categories from Wordpress
    updateGhostTags(json.db[0].data.tags,wpcategories);
});

// Parse the Wordpress posts Xml and process it
parser.parseString(xml,function(err,result) {
    if (err) {
        throw err;
    }
    //Get WP Posts
    var wpposts = getWPPosts(result);
    // Update Ghost Posts
    updateGhostPosts(json.db[0].data.posts,wpposts);
    // regenerate tag maps, for we may have found tags that were missing
    createGhostTagMaps(json.db[0].data.tags,json.db[0].data.posts_tags);
    // Update Ghost Tags and Posts with the updated tags
    updateGhostTagPosts(json.db[0].data.posts_tags,wpposts);
    // Write Ghost JSON
    fs.writeFileSync(config.outputJSON,JSON.stringify(json,null,4));

}); //returns a string containing the JSON structure by default

// Convenience function to get keys of an object
function getKeys(obj) {
    if (util.isArray(obj)) {
        return "Object is an array";
    }
    var keys=[];
    for (var k in obj) {
        keys.push(k);
    }
    return keys;
}

// Function to create lookups for ghost tags
function createGhostTagMaps(gtags,gtagposts) {
    // first empty all maps ... in case this function is called again
    gTagLookup={}; // lookup gtags by slug
    gTagLookupId={}; // lookup gtags by id
    gPostTags={}; // map of gpost slug to gtag object

    // first create a lookup for all gtags
    for(var i=0;i<gtags.length;i++) {
        gTagLookup[gtags[i].slug]=gtags[i];
        gTagLookupId[gtags[i].id]=gtags[i];
    }
    // create a lookup of gposts to gtags...
    if (getKeys(gPostsLookupId).length>0) {
        for(var i=0;i<gtagposts.length;i++) {
            var post_id=gtagposts[i].post_id;
            var tag_id=gtagposts[i].tag_id;
            if (!gPostTags[gPostsLookupId[post_id].slug]) {
                gPostTags[gPostsLookupId[post_id].slug] = {};
            }
            if (gTagLookupId[tag_id]) {
                gPostTags[gPostsLookupId[post_id].slug][gTagLookupId[tag_id].slug]=gTagLookupId[tag_id];
            }
        }
    }
}

// Function to generate an array of Wordpress categories
function getWPCategories(xml) {
    if (!xml.rss.channel) {
        console.log('No rss channel found in categories xml');
        return [];
    }
    var categories=xml.rss.channel[0]['wp:category'];
    var catref=[];
    for(var i=0;i<categories.length;i++) {
        var clean={},cat=categories[i];
        if (cat['wp:category_nicename']) {
            clean.slug=cat['wp:category_nicename'][0];
        }
        if (cat['wp:category_parent']) {
            clean.parent=cat['wp:category_parent'][0];
        }
        if (cat['wp:cat_name']) {
            clean.name=cat['wp:cat_name'][0];
        }
        if (cat['wp:category_description']) {
            clean.description=cat['wp:category_description'][0];
        }
        catref.push(clean);
    }
    return catref;
}

// Function to create ghost tags from wordpress categories array
function updateGhostTags(gtags,wpcategories) {
    // go through all wpcategories and check if there is a corresponding gtag
    for(var i=0;i<wpcategories.length;i++) {
        var wpcat=wpcategories[i];
        if (wpcat.description && wpcat.description.length>200) {
            wpcat.description=wpcat.description.substring(0,200);
        }
        if (gTagLookup[wpcat.slug]) {
            //console.log('Found gtag '+wpcat.slug+' updating description');
            gTagLookup[wpcat.slug].description=wpcat.description;
            gTagLookup[wpcat.slug].meta_description=wpcat.description;
        } else {
            //console.log('Not found gtag '+wpcat.slug+' adding');
            var tag = { id: gtags.length,
                uuid: uuid.v4(),
                name: null,
                slug: null,
                description: null,
                image: null,
                parent_id: null,
                visibility: 'public',
                meta_title: null,
                meta_description: null,
                created_at: '2016-07-26 13:09:47',
                created_by: 1,
                updated_at: '2016-07-26 13:09:47',
                updated_by: 1
            };
            tag.slug=wpcat.slug;
            tag.name=wpcat.name;
            tag.description=wpcat.description;
            tag.meta_description=wpcat.description;
            // add the new tag
            gtags.push(tag);
        }
    }
}

// Function to create a loookup of all wordpress posts with post slug as key
function getWPPosts(xml) {
    if (!xml.rss.channel) {
        console.log('No rss channel found in xml');
        return {};
    }
    var postref={};
    var posts=xml.rss.channel[0].item;
    for(var i=0;i<posts.length;i++) {
        var clean = {};
        // extract only relevant data
        clean['slug']=posts[i]['wp:post_name'][0];
        clean['excerpt']=posts[i]['excerpt:encoded'][0];
        // get categories
        if (posts[i]['category']) {
            var categories = [];
            for(var j=0;j<posts[i]['category'].length;j++) {
                if (posts[i]['category'][j]['$'].domain != 'category' &&
                    posts[i]['category'][j]['$'].domain != 'post_tag') {
                    continue;
                }
                categories.push({
                    'slug':posts[i]['category'][j]['$'].nicename,
                    'name':posts[i]['category'][j]['_']
                });
            }
            clean['categories'] = categories;
        }
        //get meta data
        for(var j=0;j<posts[i]['wp:postmeta'].length;j++) {
            var meta = posts[i]['wp:postmeta'][j];
            if (meta['wp:meta_key'][0] == '_aioseop_keywords') {
                clean['keywords']=meta['wp:meta_value'][0];
            } else if (meta['wp:meta_key'][0] == '_aioseop_description') {
                clean['description']=meta['wp:meta_value'][0];
            }
        }
        postref[clean.slug]=clean;
    }
    return postref;
}

// Function to update Ghost posts to retrieve the meta data from wordpress posts
// And to correct HTML to Markdown conversion issues
function updateGhostPosts(gposts,wpposts) {
    for(var i=0;i<gposts.length;i++) {
        // first update the gPostsLookup
        gPostsLookup[gposts[i].slug]=gposts[i];
        gPostsLookupId[gposts[i].id]=gposts[i];
        // process the post
        // 1. See if there is a matching WP post to update meta data from it
        if (wpposts[gposts[i].slug]) {
            var wppost=wpposts[gposts[i].slug];
            // found matching WP post... update description metadata
            gposts[i].description = wppost.description
                                    || wppost.excerpt;
            if (gposts[i].description.length>200) {
                gposts[i].description=gposts[i].description.substring(0,200);
            }
            gposts[i].meta_description = gposts[i].description;
        }
        // correct cloudinary image urls
        /** these are specific to my blog and may not be required
        gposts[i].markdown=gposts[i].markdown.replace(/http\:\/\/res\.cloudinary\.com\/bijoor\/image\/upload\/v/g,'http://res.cloudinary.com/bijoor/image/upload/c_scale,w_800/v');
        gposts[i].html=gposts[i].html.replace(/http\:\/\/res\.cloudinary\.com\/bijoor\/image\/upload\/v/g,'http://res.cloudinary.com/bijoor/image/upload/c_scale,w_800/v');
        gposts[i].markdown=gposts[i].markdown.replace(/\/c_crop.*?\/.*?\//g,'/c_scale,w_800/');
        gposts[i].html=gposts[i].html.replace(/\/c_crop.*?\/.*?\//g,'/c_scale,w_800/');
        **/
        // correct WP to Ghost content conversion
        // 1. remove embedded scripts
        gposts[i].markdown=gposts[i].markdown.replace(/<script[^>]*>[\s\S]*?<\/script>/g,'');
        gposts[i].html=gposts[i].html.replace(/<script[^>]*>[\s\S]*?<\/script>/g,'');
        // 2. remove embedded styles
        gposts[i].markdown=gposts[i].markdown.replace(/<style[^>]*>[\s\S]*?<\/style>/g,'');
        gposts[i].html=gposts[i].html.replace(/<style[^>]*>[\s\S]*?<\/style>/g,'');
        // 3. remove image links
        gposts[i].markdown=gposts[i].markdown.replace(/\[(\!\[[^\]]*\]\(.*?\))\]\(.*?\)/g,'\n$1 ');
        // 4. remove html tags except tables and iframes
        gposts[i].markdown=gposts[i].markdown.replace(/<(?!\/*(iframe|table|thead|tbody|tr|th|td))[^\>]*>/g,'');
        gposts[i].html=gposts[i].html.replace(/<(?!\/*(iframe|table|thead|tbody|tr|th|td))[^\>]*>/g,'');

        // correct blog links
        /** these are only for my blog and may not be required
        gposts[i].markdown=gposts[i].markdown.replace(/http:\/\/bijoor\.sitewalla\.com/g,'http://bijoor.me');
        gposts[i].html=gposts[i].html.replace(/http:\/\/bijoor\.sitewalla\.com/g,'http://bijoor.me');
        gposts[i].markdown=gposts[i].markdown.replace(/http:\/\/bijoor\.in/g,'http://bijoor.me');
        gposts[i].html=gposts[i].html.replace(/http:\/\/bijoor\.in/g,'http://bijoor.me');
        **/
    }
}

// Function to update Ghost Tags to Posts mappings from Wordpress posts' categories/tags
function updateGhostTagPosts(gtagposts,wpposts) {
    // go through all wp posts and ensure there is a tagpost map for the corresponding post in gtagposts
    for (var slug in wpposts) {
        var wppost=wpposts[slug];
        console.log('Processing '+slug+':'+wppost['categories'].map(function(el) {return el.slug;}).join(','));
        if (wppost['categories']) {
            // check if gpost exists for same slug
            if (!gPostsLookup[wppost.slug]) {
                console.log('WP Post '+wppost.slug+' does not have matching Ghost Post... skipping');
                continue;
            }
            // check if gPostTags has all the categories
            for (var i=0;i<wppost['categories'].length;i++) {
                if (!gTagLookup[wppost['categories'][i].slug]) {
                    console.log('Not found Ghost tag '+wppost['categories'][i].slug);
                    continue;
                }
                if (!gPostTags[wppost.slug] || !gPostTags[wppost.slug][wppost['categories'][i].slug]) {
                    console.log('Adding post-tag '+wppost.slug+':'+wppost['categories'][i].slug);
                    gtagposts.push({
                        "id": gtagposts.length+1,
                        "post_id": gPostsLookup[wppost.slug].id,
                        "tag_id": gTagLookup[wppost['categories'][i].slug].id,
                        "sort_order": 8
                    });
                }
            }
        }
    }
}
